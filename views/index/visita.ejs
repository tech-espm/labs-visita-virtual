<!DOCTYPE html>
<html lang="en">
<head>
	<%- include("../favicon") %>
	<link rel="manifest" href="<%- root %>/app/<%- predio.url %>/manifest.webmanifest" />

	<title><%= predio.nome %> - Visita Virtual ESPM</title>

	<!--
		Babylon.js 6.22.1
		https://github.com/BabylonJS/Babylon.js/releases/download/6.22.1/cdnSnapshot.zip
	-->
	<!--
	<script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.6.2/dat.gui.min.js"></script>
	<script src="https://assets.babylonjs.com/generated/Assets.js"></script>
	-->
	<script src="<%- root %>/app/<%- predio.url %>/assets/lib/babylonjs/recast.js"></script>
	<script src="<%- root %>/app/<%- predio.url %>/assets/lib/babylonjs/ammo.js"></script>
	<script src="<%- root %>/app/<%- predio.url %>/assets/lib/babylonjs/havok/HavokPhysics_umd.js"></script>
	<script src="<%- root %>/app/<%- predio.url %>/assets/lib/babylonjs/cannon.js"></script>
	<script src="<%- root %>/app/<%- predio.url %>/assets/lib/babylonjs/Oimo.js"></script>
	<script src="<%- root %>/app/<%- predio.url %>/assets/lib/babylonjs/earcut.min.js"></script>
	<script src="<%- root %>/app/<%- predio.url %>/assets/lib/babylonjs/babylon.js"></script>
	<script src="<%- root %>/app/<%- predio.url %>/assets/lib/babylonjs/materialsLibrary/babylonjs.materials.min.js"></script>
	<script src="<%- root %>/app/<%- predio.url %>/assets/lib/babylonjs/proceduralTexturesLibrary/babylonjs.proceduralTextures.min.js"></script>
	<script src="<%- root %>/app/<%- predio.url %>/assets/lib/babylonjs/postProcessesLibrary/babylonjs.postProcess.min.js"></script>
	<script src="<%- root %>/app/<%- predio.url %>/assets/lib/babylonjs/loaders/babylonjs.loaders.js"></script>
	<script src="<%- root %>/app/<%- predio.url %>/assets/lib/babylonjs/serializers/babylonjs.serializers.min.js"></script>
	<script src="<%- root %>/app/<%- predio.url %>/assets/lib/babylonjs/gui/babylon.gui.min.js"></script>
	<script src="<%- root %>/app/<%- predio.url %>/assets/lib/babylonjs/inspector/babylon.inspector.bundle.js"></script>

	<style type="text/css">
		* {
			box-sizing: border-box;
			margin: 0;
		}

		html, body {
			overflow: hidden;
			width: 100%;
			height: 100%;
			margin: 0;
			padding: 0;
			font-size: 16px;
			font-family: "Segoe UI", sans-serif;
		}

		button {
			font-size: inherit;
			font-family: inherit;
			font-weight: bold;
			cursor: pointer;
			border-radius: 5px;
			box-shadow: none;
			background: none;
			padding: 0.5rem 1rem;
			border: 1px solid white;
			outline: none;
			margin: 0.5rem;
		}

		button:hover, button:focus {
			opacity: 0.8;
			outline: none;
		}

		button:active {
			opacity: 0.6;
			outline: none;
		}

		.menu {
			position: fixed;
			z-index: 2;
			left: 0;
			top: 0;
			right: 0;
			padding: 10vh 0.5rem 0.5rem;
			max-width: 400px;
			text-align: center;
			user-select: none;
			background-color: rgba(0, 0, 0, 0.35);
		}

		#renderCanvas {
			width: 100%;
			height: 100%;
			touch-action: none;
		}

		#canvasZone {
			width: 100%;
			height: 100%;
		}

		#descricao {
			position: fixed;
			top: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 20px;
            border-radius: 10px;
            display: none;
            z-index: 3;
            max-width: 80%;
            text-align: center;
		}
	</style>
</head>
<body>
	<div id="canvasZone"><canvas id="renderCanvas"></canvas></div>
	<div id="descricao"></div>
	<script type="text/javascript">
		//<![CDATA[
		"use strict";

		const predio = <%- JSON.stringify(predio) %>;

		const modoXR = (window.location.href.indexOf("webxr") >= 0);
		const modoDebug = (window.location.href.indexOf("debug") >= 0);

		const imagens = predio.locais;

		let canvas = document.getElementById("renderCanvas");
		let engine = null;
		let camera = null;
		let domo = null;
		let ui = null;
		let cena = null;
		let imagemAtual = 0;
		let menu = null;
		let xrHelper = null;
		let botoesImagemXR = [];
		let botaoLocaisXR = null;
		let botaoDescricaoHTML = null;
		const rgbPadrao = "#a80532";

		let idioma = "en";
		let sufixoIdioma = "_en";
		let strings = {
			"Locais": "Locals",
			"Modo WebXR": "WebXR Mode",
			"Visita Virtual ESPM": "ESPM Virtual Visit",
		};

		function traduzir(texto) {
			return (strings && strings[texto]) || texto;
		}

		function obterNomeCurto(obj) {
			let nome_curto = null;

			if (sufixoIdioma)
				nome_curto = (obj["nome_curto" + sufixoIdioma] || obj["nome" + sufixoIdioma]);

			return nome_curto || obj.nome_curto || obj.nome;
		}

		function relativeLuminance(rgb) {
			if ((typeof rgb) === "string")
				rgb = parseInt(rgb.replace("#", ""), 16);
			rgb |= 0;
			if (rgb < 0)
				return 1;
			//http://www.w3.org/TR/2007/WD-WCAG20-TECHS-20070517/Overview.html#G18
			var RsRGB = ((rgb >>> 16) & 0xff) / 255.0,
				GsRGB = ((rgb >>> 8) & 0xff) / 255.0,
				BsRGB = (rgb & 0xff) / 255.0,
				R, G, B;
			if (RsRGB <= 0.03928) R = RsRGB / 12.92; else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
			if (GsRGB <= 0.03928) G = GsRGB / 12.92; else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
			if (BsRGB <= 0.03928) B = BsRGB / 12.92; else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
			return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);
		}

		function textColorForBackground(rgb) {
			return (relativeLuminance(rgb) < 0.4) ? "#ffffff" : "#000000";
		}

		function criarBotao(nome, texto, rgb, callback) {
			if (!rgb || rgb.length !== 7)
				rgb = rgbPadrao;

			let botao;
			if (modoXR) {
				// Criando o botão Holográfico
				// https://doc.babylonjs.com/typedoc/classes/BABYLON.GUI.HolographicButton
				botao = new BABYLON.GUI.HolographicButton(nome, false);
				menu.addControl(botao);

				// Ajustando a escala da malha do botão para aumentar a largura e diminuir a altura
				//const escalaX = 1.75;
				const escalaY = 0.5;
				//botao.scaling.x = escalaX;
				botao.scaling.y = escalaY;
				// Aplica a escala inversa ao conteúdo, senão o texto distorce
				//botao.mesh.getChildren()[1].scaling.x = 1 / escalaX;
				botao.mesh.getChildren()[1].scaling.y = 1 / escalaY;

				// Adicionando o texto ao botão
				const textBlock = new BABYLON.GUI.TextBlock();
				textBlock.text = texto;
				textBlock.color = textColorForBackground(rgb); // Cor do texto
				textBlock.fontSize = 30; // Aumentando o tamanho da fonte no modo WebXR
				textBlock.fontWeight = "bold"; // Deixando o texto em negrito
				textBlock.textWrapping = BABYLON.GUI.TextWrapping.WordWrap; // Habilitando a quebra de linha
				//textBlock.resizeToFit = true; // Ajusta o tamanho para caber no texto
				textBlock.textHorizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER; // Centraliza o texto horizontalmente
              	textBlock.textVerticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER; // Centraliza o texto verticalmente

				botao.content = textBlock;

				// Alterando a cor de fundo do botão
				//botao.backMaterial.albedoColor = BABYLON.Color3.FromHexString(rgb);
				botao.mesh.material.albedoColor = BABYLON.Color3.FromHexString(rgb);
				// https://playground.babylonjs.com/#2YZFA0#330
			} else {
				// Para o modo padrão (não XR)
				botao = BABYLON.GUI.Button.CreateSimpleButton(nome, texto);
				//botao.paddingLeft = "15px";
				//botao.paddingTop = "10px";
				//botao.paddingRight = "15px";
				//botao.paddingBottom = "10px";
				botao.width = "200px";
				botao.height = "48px";
				botao.color = "white"; // Cor do texto
				botao.background = rgb; // Cor de fundo
				// Estilo de texto no modo 2D
				botao.fontSize = "16px";
				botao.fontWeight = "bold";
				// Arredondar os cantos do botão 2D
				botao.cornerRadius = 20;
			}
			botao.onPointerDownObservable.add(callback);
			return botao;
		}

		function criarBotaoImagem(indice) {
			return criarBotao("botaoImagem" + indice, obterNomeCurto(imagens[indice]), imagens[indice].rgb, function () {
				imagemAtual = indice;
				if (!modoXR)
					alternarMenu();
				criarDomo(true);
			});
		}

		function criarBotoesMenuXR(visibilidadeBotoesImagem) {
			// Depois de depurar o código, quando o Babylon.js está no modo XR
			// *SEM* o uso de joysticks (usando apenas o ponteiro do olho + timer),
			// clicar no mesmo botão duas vezes seguidas pode fazer com que o clique
			// seja ignorado internamente. Por isso estamos recriando todos os botões
			// toda vez... (O problema não ocorria quando usando o mouse ou um joystick)
			if (menu) {
				if (botoesImagemXR) {
					for (let i = botoesImagemXR.length - 1; i >= 0; i--) {
						botoesImagemXR[i].dispose();
						menu.removeControl(botoesImagemXR[i]);
					}
				}
				if (botaoLocaisXR) {
					botaoLocaisXR.dispose();
					menu.removeControl(botaoLocaisXR);
				}
				botoesImagemXR = [];
				botaoLocaisXR = null;
				ui.removeControl(menu);
				menu.dispose();
				menu = null;
			}

			const ancora = new BABYLON.TransformNode("ancora-menu");
			menu = new BABYLON.GUI.SpherePanel();
			menu.margin = 0.2;
			menu.radius = 5;
			menu.rows = 4;
			ui.addControl(menu);
			menu.linkToTransformNode(ancora);
			menu.position.z = -2; // Move a esfera um pouco para a direita
			menu.position.x = -4; // Move a esfera um pouco para trás
			menu.blockLayout = true;
			botaoLocaisXR = criarBotao("locais", traduzir("Locais"), null, alternarMenu);
			for (let i = 0; i < imagens.length; i++) {
				const botao = criarBotaoImagem(i);
				botao.isVisible = visibilidadeBotoesImagem;
				botoesImagemXR.push(botao);
			}
			menu.blockLayout = false;
		}

		function criarDomo(recriarMenuXR) {
			if (domo) {
				domo.dispose();
				domo = null;
			}

			camera.alpha = Math.PI / 2; // Para criarDomo() funcionar corretamente
			camera.beta = Math.PI / 2;

			domo = new BABYLON.PhotoDome("Domo", imagens[imagemAtual].url, {
				//resolution: 32,
				size: 1000
			}, cena);

			//domo.material.alpha = 0;
			// Vai de 0.0 a 2.0
			domo.fovMultiplier = 2;

			// Faz a câmera apontar para frente
			camera.alpha = Math.PI;

			if (recriarMenuXR && modoXR)
				criarBotoesMenuXR(false);
		}

		function alternarMenu() {
			if (modoXR) {
				const visibilidadeBotoesImagem = !botoesImagemXR[0].isVisible;
				criarBotoesMenuXR(visibilidadeBotoesImagem);
				return;
			}

			if (menu) {
				camera.inputs.attached.pointers.attachControl(canvas);
				ui.removeControl(menu);
				menu = null;
			} else {
				camera.inputs.attached.pointers.detachControl(canvas);
				// https://doc.babylonjs.com/typedoc/classes/BABYLON.GUI.StackPanel
				menu = new BABYLON.GUI.StackPanel("menu");
				menu.isVertical = true;

				let menuAtual = null;

				for (let i = 0, qtdeAtual = 0; i < imagens.length; i++) {
					if (i != imagemAtual) {
						if (!menuAtual || qtdeAtual >= 4) {
							qtdeAtual = 0;
							menuAtual = new BABYLON.GUI.StackPanel("menuAtual" + i);
							menuAtual.isVertical = false;
							menuAtual.height = "110px";
							menuAtual.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
							menuAtual.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
							menu.addControl(menuAtual);
						}
						qtdeAtual++;
						menuAtual.addControl(criarBotaoImagem(i));
					}
				}

				const botao = criarBotao("botaoWebXR", traduzir("Modo WebXR"), null, function () {
					window.location.href += "?webxr";
				});
				botao.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
				botao.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER;
				menu.addControl(botao);

				ui.addControl(menu);
			}
		}

		function mostrarDescricao() {
			const descricaoDiv = document.getElementById("descricao");
            const descricao = await obterDescricao(imagemAtual);
            const descricaoTraduzida = traduzir(descricao);

            descricaoDiv.textContent = descricaoTraduzida;
            descricaoDiv.style.display = "block";
		}

		function obterDescricao(indice) {
			
        }

		function criarMenuHTML() {
			const divMenu = document.createElement("div");
			divMenu.className = "menu";
			divMenu.style.display = "none";

			const divBotoes = document.createElement("div");
			//divBotoes.style.textAlign = "left";
			divBotoes.style.display = "flex";
			divBotoes.style.flexDirection = "row";
			divBotoes.style.flexWrap = "wrap";

			const alternarMenuHTML = function () {
				divMenu.style.display = ((divMenu.style.display == "none") ? "" : "none");
			};

			const criarBotaoHTML = function (pai, texto, rgb, callback) {
				if (!rgb || rgb.length !== 7)
					rgb = rgbPadrao;
			
				const botao = document.createElement("button");
				botao.setAttribute("type", "button");
				botao.onclick = callback;
				botao.textContent = texto;
				botao.style.backgroundColor = rgb;
				botao.style.color = textColorForBackground(rgb);
				botao.style.borderColor = botao.style.color;
				botao.style.flex = "1 1 0";

				pai.appendChild(botao);

				return botao;
			};

			const criarBotaoImagemHTML = function (pai, indice) {
				return criarBotaoHTML(pai, obterNomeCurto(imagens[indice]), imagens[indice].rgb, function () {
					imagemAtual = indice;
					//alternarMenuHTML();
					criarDomo(false);
				});
			};

			const botaoLocais = criarBotaoHTML(document.body, traduzir("Locais"), rgbPadrao, alternarMenuHTML);
			botaoLocais.style.position = "fixed";
			botaoLocais.style.zIndex = "3";
			botaoLocais.style.left = "0.5rem";
			botaoLocais.style.top = "0.5rem";

			const botaoDescricaoHTML = criarBotaoHTML(document.body, traduzir("Descrição"), rgbPadrao, mostrarDescricao);
			botaoDescricaoHTML.style.position = "fixed"
			botaoDescricaoHTML.style.zIndex = "3"
			botaoDescricaoHTML.style.right = "0.5rem"
			botaoDescricaoHTML.style.top = "0.5rem"

			for (let i = 0; i < imagens.length; i++)
				criarBotaoImagemHTML(divBotoes, i);

			divMenu.appendChild(divBotoes);

			const botaoXR = criarBotaoHTML(divMenu, traduzir("Modo WebXR"), null, function () {
				window.location.href += "?webxr";
			});

			document.body.appendChild(divMenu);
		}

		async function criarCena() {
			cena = new BABYLON.Scene(engine);

			if (modoDebug)
				cena.debugLayer.show({ embedMode: true });

			camera = new BABYLON.ArcRotateCamera("Camera", -Math.PI / 2, Math.PI / 2, 5, BABYLON.Vector3.Zero(), cena);
			camera.attachControl(canvas, true);
			camera.inputs.attached.mousewheel.detachControl(canvas);

			// https://doc.babylonjs.com/typedoc/classes/BABYLON.ArcRotateCamera
			camera.inertia = 0.75; // Valor padrão = 0.9

			criarDomo(false);

			if (modoXR) {
				xrHelper = await cena.createDefaultXRExperienceAsync();

				// https://doc.babylonjs.com/features/featuresDeepDive/gui/gui3D
				// https://doc.babylonjs.com/typedoc/classes/BABYLON.GUI.SpherePanel
				ui = new BABYLON.GUI.GUI3DManager(cena);
				criarBotoesMenuXR(false);
			} else {
				criarMenuHTML();
				/*
				ui = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI("UI");

				const botao = criarBotao("locais", traduzir("Locais"), null, alternarMenu);
				botao.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;
				botao.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP;
				ui.addControl(botao);
				*/
			}
		}

		window.addEventListener("resize", function () {
			if (engine)
				engine.resize();
		});

		async function setup() {
			const language = (navigator["userLanguage"] || navigator.language);
			if (language && language.toLowerCase().indexOf("pt") === 0) {
				idioma = "pt-br";
				sufixoIdioma = "";
				strings = null;
				document.documentElement.setAttribute("lang", "pt-br");
			}
			document.title = obterNomeCurto(predio) + " - " + traduzir("Visita Virtual ESPM");

			engine = new BABYLON.Engine(canvas, true, {
				preserveDrawingBuffer: false,
				stencil: false,
				disableWebGL2Support: false
			});

			await criarCena();

			engine.runRenderLoop(function () {
				if (cena && cena.activeCamera) {
					cena.render();
				}
			});
		}

		setup();
	</script>

	<% if (offline) { %>
	<script type="text/javascript">
		//<![CDATA[
		"use strict";
		if ("serviceWorker" in navigator) {
			const promise = navigator.serviceWorker.register("<%- root %>/app/<%- predio.url %>/sw");
			if (promise && ("then" in promise)) {
				promise.then(function (registration) {
					if (registration && ("onupdatefound" in registration) && registration.active) {
						registration.onupdatefound = function () {
							setTimeout(function () {
								if (confirm("Nova atualização encontrada! Recarregar a página agora?"))
									window.location.reload();
							}, 30000);
						};
					}
				});
			}
		}

		//]]>
	</script>
	<% } %>
</body>
</html>
